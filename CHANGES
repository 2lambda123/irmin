0.6.0: (2014-04-12)
* Support for user-defined contents (with custom merge operators)
* Support for merge operations
* Rename `IrminTree` to `IrminNode` to reflect the fact that we
  can support arbitrary immutable graphs (it's better if they are
  DAGs but that's not mandatory)
* Rename `IrminBlob` to `IrminContents` to reflect the fact that
  we also support structured contents (as JSON objects)
* Support for linking the library without linking to camlp4 as well (#23)

0.5.1: (2014-03-02)
* Port to use Cohttp 0.10.0 interface.

0.5.0:
* More consistent support for notifications. `irmin watch` works
  now for all backends.
* Support for different blob formats on the command-line
* Support for JSON blobs
* More flexible `irmin fetch` command: we can now choose the backend to
  import the data in
* Fix import of Git objects when the blobs were not imported first
* Support non-UTF8 strings as path name and blob contents (for all
  backends, including the JSON one)
* Speed-up the `slow` tests execution time
* Improve the output graph when objects of different kinds might have
  the same SHA1

0.4: (2014-01-21)
* The command-line tool now looks in the environment for the variable
  `IRMIN` to configure its default backend
* Add a Git backend
* Add Travis CI scripts to the repo
* Use `Lwt_bytes` and `Lwt_unix` instead of the custom-made `IrminChannel`
* Use `bin_prot` instead of a custom binary protocol
* Major refactoring: `Value` is now `Blob`, `Revision` is now `Commit`
   and `Tag` becomes `Reference` (rational: consistency with Git names)
* Use `core_kernel` instead of building a custom `Identiable.S`
* Use `dolog` instead of a custom log library
* Use `mstruct` (mutable buffers on top of `cstruct`) which is now
  released independently

0.3: (2013-12-13)
* Fix a fd leak in the filesystem bakend
* Functorize the CRUD interface over the HTTP client implementation
* Use oasis to build the project
* Use the now released separately `ezjsonm` and `alcotest` libraries

0.2: (2013-11-23)
* Fix the HTTP server responses
* More high-level tests
* Add unit-tests for the client CRUD interfaces (over memory and/or filesystem)
* Fix issues with the Tree API
* Implement a relatively efficent Import/Export scheme (#3)
* For more safety, the marshalled values are now typed in the binary protocol
* Add functions to dump the contents of the store as a Graphviz graph
* Polish the CLI which now looks usable enough
* Optimize the CRUD backend by executing high-level API functions on the server
* Improve and make the CLI easier to use
* Implement clone/pull/push/snapshot/revert in the CLI

0.1: (2013-10-30)
* Use an HTTP server as a front-end
* Initial support for in-memory and filesystem backends
* Simple signature for backends
* Binary protocol for storing values and metadata and for future network exchange
